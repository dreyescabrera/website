---
import externalResource from "@/assets/icons/external-resource.svg?raw";
import { getDynamicImages } from "@/utils/get-dynamic-images";
import { Picture } from "astro:assets";
import { getCollection } from "astro:content";
import Icon from "../utils/icon.astro";

interface Props {
  omit?: string;
  limit?: number;
  onlyHighlighted?: boolean;
}

const { omit, limit, onlyHighlighted = false } = Astro.props;

let projects = await getCollection("projects", (entry) => entry.id !== omit);

if (onlyHighlighted) {
  projects = projects.filter((project) => project.data.highlighted);
}

if (limit) {
  projects = projects.slice(0, limit);
}

const images = await getDynamicImages(
  projects.map((project) => project.data.imgUrl),
);
---

<ul
  class="grid grid-cols-[repeat(auto-fill,minmax(18.75rem,1fr))] gap-x-6 gap-y-10"
>
  {
    projects.map(({ id, data: { title, yearStart, yearEnd } }, index) => (
      <li class="group">
        <a href={`/projects/${id}`}>
          <figure class="overflow-hidden rounded-xl shadow-sm ring-1 ring-zinc-200">
            <Picture
              formats={["avif", "webp"]}
              src={images[index]}
              alt={title}
              class="aspect-[4.475_/_3] w-full transition-transform duration-500 group-hover:scale-105"
            />
          </figure>

          <h3 class="mb-2.5 mt-5 text-sm font-normal leading-none tracking-normal">
            {title}
          </h3>

          <div class="flex items-center justify-between gap-2.5">
            <p class="text-xs leading-none text-zinc-500">
              {yearStart && <span>{yearStart} - </span>}
              <span>{yearEnd}</span>
            </p>

            <Icon
              icon={externalResource}
              class="size-5 fill-zinc-500 transition-all duration-300 group-hover:fill-black"
            />
          </div>
        </a>
      </li>
    ))
  }
</ul>
